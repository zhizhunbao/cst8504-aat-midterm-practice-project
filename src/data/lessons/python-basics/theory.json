{
  "variables-data-types": {
    "zh": {
      "concepts": [
        "变量是存储数据的容器，在Python中不需要声明类型",
        "Python有四种基本数据类型：整数(int)、浮点数(float)、字符串(str)、布尔值(bool)",
        "变量名必须以字母或下划线开头，不能以数字开头",
        "Python是动态类型语言，变量类型可以随时改变",
        "使用type()函数可以查看变量的数据类型",
        "三引号字符串可以跨越多行，用于文档字符串"
      ],
      "examples": [
        {
          "title": "变量声明和赋值",
          "code": "# 变量声明和赋值\nname = \"张三\"\nage = 25\nheight = 1.75\nis_student = True\n\n# 查看变量类型\nprint(type(name))    # <class 'str'>\nprint(type(age))     # <class 'int'>\nprint(type(height))  # <class 'float'>\nprint(type(is_student))  # <class 'bool'>"
        },
        {
          "title": "类型转换",
          "code": "# 类型转换示例\nnum_str = \"123\"\nnum_int = int(num_str)    # 字符串转整数\nnum_float = float(num_str)  # 字符串转浮点数\n\n# 数字转字符串\nage = 25\nage_str = str(age)\n\n# 布尔值转换\nprint(bool(1))    # True\nprint(bool(0))    # False\nprint(bool(\"\"))   # False\nprint(bool(\"hello\"))  # True"
        }
      ],
      "keyPoints": [
        "Python变量名区分大小写",
        "变量名不能使用Python关键字",
        "建议使用有意义的变量名",
        "字符串可以用单引号或双引号包围",
        "布尔值只有True和False两个值"
      ]
    },
    "en": {
      "concepts": [
        "Variables are containers for storing data, no type declaration needed in Python",
        "Python has four basic data types: int, float, str, bool",
        "Variable names must start with a letter or underscore, not a number",
        "Python is dynamically typed, variable types can change anytime",
        "Use type() function to check variable data type"
      ],
      "examples": [
        {
          "title": "Variable Declaration and Assignment",
          "code": "# Variable declaration and assignment\nname = \"John\"\nage = 25\nheight = 1.75\nis_student = True\n\n# Check variable types\nprint(type(name))    # <class 'str'>\nprint(type(age))     # <class 'int'>\nprint(type(height))  # <class 'float'>\nprint(type(is_student))  # <class 'bool'>"
        },
        {
          "title": "Type Conversion",
          "code": "# Type conversion examples\nnum_str = \"123\"\nnum_int = int(num_str)    # string to int\nnum_float = float(num_str)  # string to float\n\n# number to string\nage = 25\nage_str = str(age)\n\n# boolean conversion\nprint(bool(1))    # True\nprint(bool(0))    # False\nprint(bool(\"\"))   # False\nprint(bool(\"hello\"))  # True"
        }
      ],
      "keyPoints": [
        "Python variable names are case-sensitive",
        "Variable names cannot use Python keywords",
        "Use meaningful variable names",
        "Strings can be enclosed in single or double quotes",
        "Boolean values are only True and False"
      ]
    }
  },
  "control-structures": {
    "zh": {
      "concepts": [
        "if-else语句用于条件判断，根据条件执行不同的代码块",
        "for循环用于遍历序列（列表、字符串、元组等）",
        "while循环在条件为真时重复执行代码块",
        "break语句用于跳出循环",
        "continue语句用于跳过当前循环迭代，继续下一次迭代"
      ],
      "examples": [
        {
          "title": "if-else条件语句",
          "code": "# if-else条件语句示例\nage = 18\n\nif age >= 18:\n    print(\"成年人\")\nelse:\n    print(\"未成年人\")\n\n# 多重条件判断\nscore = 85\nif score >= 90:\n    grade = \"A\"\nelif score >= 80:\n    grade = \"B\"\nelif score >= 70:\n    grade = \"C\"\nelse:\n    grade = \"D\"\nprint(f\"成绩等级: {grade}\")"
        },
        {
          "title": "for循环",
          "code": "# for循环示例\n# 遍历列表\nfruits = [\"苹果\", \"香蕉\", \"橙子\"]\nfor fruit in fruits:\n    print(fruit)\n\n# 遍历字符串\nfor char in \"Python\":\n    print(char)\n\n# 使用range()函数\nfor i in range(5):\n    print(i)  # 输出: 0, 1, 2, 3, 4\n\nfor i in range(1, 6):\n    print(i)  # 输出: 1, 2, 3, 4, 5"
        },
        {
          "title": "while循环",
          "code": "# while循环示例\ncount = 0\nwhile count < 5:\n    print(f\"计数: {count}\")\n    count += 1\n\n# 使用break和continue\nnum = 0\nwhile num < 10:\n    num += 1\n    if num == 3:\n        continue  # 跳过3\n    if num == 8:\n        break     # 跳出循环\n    print(num)  # 输出: 1, 2, 4, 5, 6, 7"
        }
      ],
      "keyPoints": [
        "缩进在Python中非常重要，用于表示代码块",
        "条件表达式可以使用比较运算符（==, !=, <, >, <=, >=）",
        "逻辑运算符（and, or, not）用于组合多个条件",
        "range()函数生成数字序列，常用于for循环",
        "避免无限循环，确保while循环有退出条件"
      ]
    },
    "en": {
      "concepts": [
        "if-else statements are used for conditional execution of different code blocks",
        "for loops are used to iterate over sequences (lists, strings, tuples, etc.)",
        "while loops repeat code blocks while a condition is true",
        "break statement is used to exit a loop",
        "continue statement skips the current iteration and continues with the next"
      ],
      "examples": [
        {
          "title": "if-else Conditional Statements",
          "code": "# if-else conditional statements example\nage = 18\n\nif age >= 18:\n    print(\"Adult\")\nelse:\n    print(\"Minor\")\n\n# Multiple condition checking\nscore = 85\nif score >= 90:\n    grade = \"A\"\nelif score >= 80:\n    grade = \"B\"\nelif score >= 70:\n    grade = \"C\"\nelse:\n    grade = \"D\"\nprint(f\"Grade: {grade}\")"
        },
        {
          "title": "for Loops",
          "code": "# for loop examples\n# Iterate over list\nfruits = [\"apple\", \"banana\", \"orange\"]\nfor fruit in fruits:\n    print(fruit)\n\n# Iterate over string\nfor char in \"Python\":\n    print(char)\n\n# Using range() function\nfor i in range(5):\n    print(i)  # Output: 0, 1, 2, 3, 4\n\nfor i in range(1, 6):\n    print(i)  # Output: 1, 2, 3, 4, 5"
        },
        {
          "title": "while Loops",
          "code": "# while loop examples\ncount = 0\nwhile count < 5:\n    print(f\"Count: {count}\")\n    count += 1\n\n# Using break and continue\nnum = 0\nwhile num < 10:\n    num += 1\n    if num == 3:\n        continue  # skip 3\n    if num == 8:\n        break     # exit loop\n    print(num)  # Output: 1, 2, 4, 5, 6, 7"
        }
      ],
      "keyPoints": [
        "Indentation is crucial in Python for defining code blocks",
        "Conditional expressions use comparison operators (==, !=, <, >, <=, >=)",
        "Logical operators (and, or, not) combine multiple conditions",
        "range() function generates number sequences, commonly used in for loops",
        "Avoid infinite loops by ensuring while loops have exit conditions"
      ]
    }
  },
  "functions": {
    "zh": {
      "concepts": [
        "函数是一段可重复使用的代码块，用于执行特定任务",
        "函数定义使用def关键字，后跟函数名和参数列表",
        "函数可以有参数（输入）和返回值（输出）",
        "参数可以是必需参数、默认参数、关键字参数或可变参数",
        "函数内部定义的变量是局部变量，函数外部无法访问"
      ],
      "examples": [
        {
          "title": "基本函数定义和调用",
          "code": "# 基本函数定义和调用\ndef greet(name):\n    \"\"\"问候函数\"\"\"\n    return f\"你好, {name}!\"\n\n# 调用函数\nmessage = greet(\"张三\")\nprint(message)  # 输出: 你好, 张三!\n\n# 无返回值的函数\ndef print_info(name, age):\n    print(f\"姓名: {name}, 年龄: {age}\")\n\nprint_info(\"李四\", 25)"
        },
        {
          "title": "默认参数和关键字参数",
          "code": "# 默认参数\ndef greet_with_title(name, title=\"先生\"):\n    return f\"你好, {title}{name}!\"\n\nprint(greet_with_title(\"王五\"))  # 你好, 先生王五!\nprint(greet_with_title(\"赵六\", \"女士\"))  # 你好, 女士赵六!\n\n# 关键字参数\ndef create_profile(name, age, city, country=\"中国\"):\n    return f\"姓名: {name}, 年龄: {age}, 城市: {city}, 国家: {country}\"\n\n# 使用关键字参数，可以不按顺序传递\nprofile = create_profile(\n    city=\"北京\",\n    name=\"孙七\",\n    age=30\n)\nprint(profile)"
        },
        {
          "title": "可变参数",
          "code": "# 可变参数 *args\ndef sum_numbers(*args):\n    \"\"\"计算任意数量数字的和\"\"\"\n    total = 0\n    for num in args:\n        total += num\n    return total\n\nprint(sum_numbers(1, 2, 3))  # 6\nprint(sum_numbers(1, 2, 3, 4, 5))  # 15\n\n# 关键字可变参数 **kwargs\ndef print_info(**kwargs):\n    \"\"\"打印任意关键字参数\"\"\"\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nprint_info(name=\"周八\", age=28, city=\"上海\")"
        }
      ],
      "keyPoints": [
        "函数名应该描述函数的功能，使用动词或动词短语",
        "使用文档字符串（docstring）说明函数的功能",
        "函数应该只做一件事，保持功能单一",
        "避免在函数中使用全局变量",
        "合理使用默认参数可以简化函数调用"
      ]
    },
    "en": {
      "concepts": [
        "Functions are reusable code blocks that perform specific tasks",
        "Function definition uses def keyword followed by function name and parameters",
        "Functions can have parameters (input) and return values (output)",
        "Parameters can be required, default, keyword, or variable arguments",
        "Variables defined inside functions are local and not accessible outside"
      ],
      "examples": [
        {
          "title": "Basic Function Definition and Call",
          "code": "# Basic function definition and call\ndef greet(name):\n    \"\"\"Greeting function\"\"\"\n    return f\"Hello, {name}!\"\n\n# Call function\nmessage = greet(\"John\")\nprint(message)  # Output: Hello, John!\n\n# Function without return value\ndef print_info(name, age):\n    print(f\"Name: {name}, Age: {age}\")\n\nprint_info(\"Jane\", 25)"
        },
        {
          "title": "Default and Keyword Arguments",
          "code": "# Default arguments\ndef greet_with_title(name, title=\"Mr.\"):\n    return f\"Hello, {title}{name}!\"\n\nprint(greet_with_title(\"Smith\"))  # Hello, Mr.Smith!\nprint(greet_with_title(\"Johnson\", \"Ms.\"))  # Hello, Ms.Johnson!\n\n# Keyword arguments\ndef create_profile(name, age, city, country=\"USA\"):\n    return f\"Name: {name}, Age: {age}, City: {city}, Country: {country}\"\n\n# Using keyword arguments, order doesn't matter\nprofile = create_profile(\n    city=\"New York\",\n    name=\"Brown\",\n    age=30\n)\nprint(profile)"
        },
        {
          "title": "Variable Arguments",
          "code": "# Variable arguments *args\ndef sum_numbers(*args):\n    \"\"\"Calculate sum of any number of arguments\"\"\"\n    total = 0\n    for num in args:\n        total += num\n    return total\n\nprint(sum_numbers(1, 2, 3))  # 6\nprint(sum_numbers(1, 2, 3, 4, 5))  # 15\n\n# Keyword variable arguments **kwargs\ndef print_info(**kwargs):\n    \"\"\"Print any keyword arguments\"\"\"\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nprint_info(name=\"Wilson\", age=28, city=\"Boston\")"
        }
      ],
      "keyPoints": [
        "Function names should describe what the function does, use verbs or verb phrases",
        "Use docstrings to document function functionality",
        "Functions should do one thing and do it well",
        "Avoid using global variables inside functions",
        "Default parameters can simplify function calls"
      ]
    }
  },
  "data-structures": {
    "zh": {
      "concepts": [
        "列表(list)是有序的可变集合，可以存储不同类型的元素",
        "元组(tuple)是有序的不可变集合，创建后不能修改",
        "字典(dict)是键值对的集合，通过键来访问值",
        "集合(set)是无序的唯一元素集合，不允许重复",
        "字符串(str)是不可变的字符序列"
      ],
      "examples": [
        {
          "title": "列表操作",
          "code": "# 列表操作示例\n# 创建列表\nfruits = [\"苹果\", \"香蕉\", \"橙子\"]\nnumbers = [1, 2, 3, 4, 5]\nmixed = [1, \"hello\", 3.14, True]\n\n# 访问元素\nprint(fruits[0])  # 苹果\nprint(fruits[-1])  # 橙子\n\n# 修改元素\nfruits[1] = \"葡萄\"\nprint(fruits)  # ['苹果', '葡萄', '橙子']\n\n# 添加元素\nfruits.append(\"草莓\")  # 末尾添加\nfruits.insert(1, \"桃子\")  # 指定位置插入\nprint(fruits)\n\n# 删除元素\nfruits.remove(\"葡萄\")  # 删除指定值\ndel fruits[0]  # 删除指定索引\nprint(fruits)"
        },
        {
          "title": "字典操作",
          "code": "# 字典操作示例\n# 创建字典\nstudent = {\n    \"name\": \"张三\",\n    \"age\": 20,\n    \"grade\": \"A\",\n    \"subjects\": [\"数学\", \"英语\", \"物理\"]\n}\n\n# 访问值\nprint(student[\"name\"])  # 张三\nprint(student.get(\"age\"))  # 20\nprint(student.get(\"phone\", \"未提供\"))  # 未提供\n\n# 修改和添加\nstudent[\"age\"] = 21\nstudent[\"phone\"] = \"123-456-7890\"\nprint(student)\n\n# 遍历字典\nfor key, value in student.items():\n    print(f\"{key}: {value}\")\n\n# 删除键值对\ndel student[\"grade\"]\nprint(student)"
        },
        {
          "title": "元组和集合",
          "code": "# 元组操作\ncoordinates = (10, 20)\nprint(coordinates[0])  # 10\n# coordinates[0] = 15  # 错误！元组不可变\n\n# 元组解包\nx, y = coordinates\nprint(f\"x: {x}, y: {y}\")\n\n# 集合操作\nnumbers = {1, 2, 3, 4, 5}\nnumbers.add(6)  # 添加元素\nnumbers.remove(1)  # 删除元素\nprint(numbers)  # {2, 3, 4, 5, 6}\n\n# 集合运算\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\nprint(set1.union(set2))  # {1, 2, 3, 4, 5, 6}\nprint(set1.intersection(set2))  # {3, 4}\nprint(set1.difference(set2))  # {1, 2}"
        }
      ],
      "keyPoints": [
        "列表使用方括号[]，元组使用圆括号()，字典使用花括号{}",
        "列表和字典是可变的，元组和字符串是不可变的",
        "字典的键必须是不可变类型（字符串、数字、元组）",
        "集合自动去除重复元素，常用于去重操作",
        "使用in操作符检查元素是否存在于数据结构中"
      ]
    },
    "en": {
      "concepts": [
        "Lists are ordered mutable collections that can store different types of elements",
        "Tuples are ordered immutable collections that cannot be modified after creation",
        "Dictionaries are collections of key-value pairs, accessed by keys",
        "Sets are unordered collections of unique elements, no duplicates allowed",
        "Strings are immutable sequences of characters"
      ],
      "examples": [
        {
          "title": "List Operations",
          "code": "# List operations example\n# Create lists\nfruits = [\"apple\", \"banana\", \"orange\"]\nnumbers = [1, 2, 3, 4, 5]\nmixed = [1, \"hello\", 3.14, True]\n\n# Access elements\nprint(fruits[0])  # apple\nprint(fruits[-1])  # orange\n\n# Modify elements\nfruits[1] = \"grape\"\nprint(fruits)  # ['apple', 'grape', 'orange']\n\n# Add elements\nfruits.append(\"strawberry\")  # add to end\nfruits.insert(1, \"peach\")  # insert at position\nprint(fruits)\n\n# Remove elements\nfruits.remove(\"grape\")  # remove by value\ndel fruits[0]  # remove by index\nprint(fruits)"
        },
        {
          "title": "Dictionary Operations",
          "code": "# Dictionary operations example\n# Create dictionary\nstudent = {\n    \"name\": \"John\",\n    \"age\": 20,\n    \"grade\": \"A\",\n    \"subjects\": [\"Math\", \"English\", \"Physics\"]\n}\n\n# Access values\nprint(student[\"name\"])  # John\nprint(student.get(\"age\"))  # 20\nprint(student.get(\"phone\", \"Not provided\"))  # Not provided\n\n# Modify and add\nstudent[\"age\"] = 21\nstudent[\"phone\"] = \"123-456-7890\"\nprint(student)\n\n# Iterate dictionary\nfor key, value in student.items():\n    print(f\"{key}: {value}\")\n\n# Delete key-value pair\ndel student[\"grade\"]\nprint(student)"
        },
        {
          "title": "Tuples and Sets",
          "code": "# Tuple operations\ncoordinates = (10, 20)\nprint(coordinates[0])  # 10\n# coordinates[0] = 15  # Error! Tuples are immutable\n\n# Tuple unpacking\nx, y = coordinates\nprint(f\"x: {x}, y: {y}\")\n\n# Set operations\nnumbers = {1, 2, 3, 4, 5}\nnumbers.add(6)  # add element\nnumbers.remove(1)  # remove element\nprint(numbers)  # {2, 3, 4, 5, 6}\n\n# Set operations\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\nprint(set1.union(set2))  # {1, 2, 3, 4, 5, 6}\nprint(set1.intersection(set2))  # {3, 4}\nprint(set1.difference(set2))  # {1, 2}"
        }
      ],
      "keyPoints": [
        "Lists use square brackets [], tuples use parentheses (), dictionaries use curly braces {}",
        "Lists and dictionaries are mutable, tuples and strings are immutable",
        "Dictionary keys must be immutable types (strings, numbers, tuples)",
        "Sets automatically remove duplicates, commonly used for deduplication",
        "Use 'in' operator to check if element exists in data structure"
      ]
    }
  },
  "comprehensions-unpacking-slicing": {
    "zh": {
      "concepts": [
        "列表推导式是创建列表的简洁方法，语法为[expression for item in iterable]",
        "列表推导式可以包含条件语句：[expression for item in iterable if condition]",
        "解包允许将序列中的元素分配给多个变量",
        "切片用于从序列中提取子序列，语法为[start:stop:step]",
        "切片支持负数索引，-1表示最后一个元素",
        "二维切片可以处理嵌套列表或二维数组"
      ],
      "examples": [
        {
          "title": "列表推导式基础",
          "code": "# 基本列表推导式\nsquares = [x**2 for x in range(10)]\nprint(squares)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n# 带条件的列表推导式\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\nprint(even_squares)  # [0, 4, 16, 36, 64]\n\n# 期中考试样题：0到99的平方\nsquares_0_to_99 = [x**2 for x in range(100)]\nprint(len(squares_0_to_99))  # 100\n\n# 集合推导式：0到99，除了80到89\nnumbers_set = {x for x in range(100) if not (80 <= x <= 89)}\nprint(numbers_set)  # {0, 1, 2, ..., 78, 79, 90, 91, ..., 99}"
        },
        {
          "title": "解包操作",
          "code": "# 基本解包\ncoordinates = (10, 20)\nx, y = coordinates\nprint(f\"x: {x}, y: {y}\")\n\n# 列表解包\nnumbers = [1, 2, 3, 4, 5]\nfirst, *middle, last = numbers\nprint(f\"first: {first}, middle: {middle}, last: {last}\")\n# first: 1, middle: [2, 3, 4], last: 5\n\n# 函数参数解包\ndef add_three(a, b, c):\n    return a + b + c\n\nvalues = [1, 2, 3]\nresult = add_three(*values)  # 解包传递参数\nprint(result)  # 6\n\n# 字典解包\nperson = {'name': '张三', 'age': 25, 'city': '北京'}\nname, age, city = person.values()\nprint(f\"姓名: {name}, 年龄: {age}, 城市: {city}\")"
        },
        {
          "title": "切片操作",
          "code": "# 基本切片\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(numbers[2:7])    # [2, 3, 4, 5, 6]\nprint(numbers[:5])     # [0, 1, 2, 3, 4]\nprint(numbers[5:])     # [5, 6, 7, 8, 9]\nprint(numbers[-3:])    # [7, 8, 9]\nprint(numbers[::2])    # [0, 2, 4, 6, 8] - 步长为2\nprint(numbers[::-1])   # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] - 反转\n\n# 二维切片\nmatrix = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16]\n]\n\n# 获取前3行前3列\nsubmatrix = [row[:3] for row in matrix[:3]]\nprint(\"前3行前3列:\")\nfor row in submatrix:\n    print(row)\n# [1, 2, 3]\n# [5, 6, 7]\n# [9, 10, 11]\n\n# 获取第3列和第7列（索引2和6）\ncol_3 = [row[2] for row in matrix]  # 第3列\ncol_7 = [row[6] for row in matrix] if len(matrix[0]) > 6 else []  # 第7列\nprint(f\"第3列: {col_3}\")\nprint(f\"第7列: {col_7}\")"
        }
      ],
      "keyPoints": [
        "列表推导式比for循环更简洁高效",
        "解包操作可以简化变量赋值和函数调用",
        "切片[start:stop:step]中，start包含，stop不包含",
        "负数索引从末尾开始计数",
        "二维切片需要结合列表推导式使用"
      ]
    },
    "en": {
      "concepts": [
        "List comprehensions are concise ways to create lists: [expression for item in iterable]",
        "List comprehensions can include conditions: [expression for item in iterable if condition]",
        "Unpacking allows assigning sequence elements to multiple variables",
        "Slicing extracts subsequences from sequences: [start:stop:step]",
        "Slicing supports negative indexing, -1 represents the last element",
        "Two-dimensional slicing can handle nested lists or 2D arrays"
      ],
      "examples": [
        {
          "title": "Basic List Comprehensions",
          "code": "# Basic list comprehension\nsquares = [x**2 for x in range(10)]\nprint(squares)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n# List comprehension with condition\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\nprint(even_squares)  # [0, 4, 16, 36, 64]\n\n# Midterm sample: squares from 0 to 99\nsquares_0_to_99 = [x**2 for x in range(100)]\nprint(len(squares_0_to_99))  # 100\n\n# Set comprehension: 0 to 99, except 80 to 89\nnumbers_set = {x for x in range(100) if not (80 <= x <= 89)}\nprint(numbers_set)  # {0, 1, 2, ..., 78, 79, 90, 91, ..., 99}"
        },
        {
          "title": "Unpacking Operations",
          "code": "# Basic unpacking\ncoordinates = (10, 20)\nx, y = coordinates\nprint(f\"x: {x}, y: {y}\")\n\n# List unpacking\nnumbers = [1, 2, 3, 4, 5]\nfirst, *middle, last = numbers\nprint(f\"first: {first}, middle: {middle}, last: {last}\")\n# first: 1, middle: [2, 3, 4], last: 5\n\n# Function argument unpacking\ndef add_three(a, b, c):\n    return a + b + c\n\nvalues = [1, 2, 3]\nresult = add_three(*values)  # unpack arguments\nprint(result)  # 6\n\n# Dictionary unpacking\nperson = {'name': 'John', 'age': 25, 'city': 'New York'}\nname, age, city = person.values()\nprint(f\"Name: {name}, Age: {age}, City: {city}\")"
        },
        {
          "title": "Slicing Operations",
          "code": "# Basic slicing\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(numbers[2:7])    # [2, 3, 4, 5, 6]\nprint(numbers[:5])     # [0, 1, 2, 3, 4]\nprint(numbers[5:])     # [5, 6, 7, 8, 9]\nprint(numbers[-3:])    # [7, 8, 9]\nprint(numbers[::2])    # [0, 2, 4, 6, 8] - step 2\nprint(numbers[::-1])   # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] - reverse\n\n# Two-dimensional slicing\nmatrix = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16]\n]\n\n# Get first 3 rows, first 3 columns\nsubmatrix = [row[:3] for row in matrix[:3]]\nprint(\"First 3 rows, first 3 columns:\")\nfor row in submatrix:\n    print(row)\n# [1, 2, 3]\n# [5, 6, 7]\n# [9, 10, 11]\n\n# Get columns 3 and 7 (indices 2 and 6)\ncol_3 = [row[2] for row in matrix]  # column 3\ncol_7 = [row[6] for row in matrix] if len(matrix[0]) > 6 else []  # column 7\nprint(f\"Column 3: {col_3}\")\nprint(f\"Column 7: {col_7}\")"
        }
      ],
      "keyPoints": [
        "List comprehensions are more concise and efficient than for loops",
        "Unpacking simplifies variable assignment and function calls",
        "In slicing [start:stop:step], start is inclusive, stop is exclusive",
        "Negative indexing counts from the end",
        "Two-dimensional slicing requires combining with list comprehensions"
      ]
    }
  }
}
