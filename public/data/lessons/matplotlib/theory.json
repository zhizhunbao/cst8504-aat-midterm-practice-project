{
  "basic-plotting": {
    "zh": {
      "concepts": [
        "Matplotlib是Python中最流行的数据可视化库",
        "pyplot模块提供了类似MATLAB的绘图接口",
        "Figure是绘图窗口，包含一个或多个Axes（子图）",
        "支持多种图表类型：线图、散点图、柱状图、饼图等",
        "可以自定义图表的颜色、标签、标题、图例等样式",
        "基本线图和散点图是期中考试的重点内容"
      ],
      "examples": [
        {
          "title": "基本线图绘制",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# 创建数据\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# 创建图形和坐标轴\nplt.figure(figsize=(8, 6))\nplt.plot(x, y, label='sin(x)', color='blue', linewidth=2)\n\n# 添加标签和标题\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('正弦函数图像')\nplt.legend()\nplt.grid(True, alpha=0.3)\n\n# 显示图形\nplt.show()\n\n# 保存图形\n# plt.savefig('sin_plot.png', dpi=300, bbox_inches='tight')"
        },
        {
          "title": "多种图表类型",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# 创建示例数据\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([2, 4, 6, 8, 10])\ny2 = np.array([1, 3, 2, 5, 4])\n\n# 创建子图\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))\n\n# 线图\naxes[0, 0].plot(x, y1, 'b-o', label='线性增长')\naxes[0, 0].plot(x, y2, 'r--s', label='波动')\naxes[0, 0].set_title('线图')\naxes[0, 0].legend()\naxes[0, 0].grid(True)\n\n# 散点图\naxes[0, 1].scatter(x, y1, c='blue', s=100, alpha=0.7, label='数据点1')\naxes[0, 1].scatter(x, y2, c='red', s=100, alpha=0.7, label='数据点2')\naxes[0, 1].set_title('散点图')\naxes[0, 1].legend()\n\n# 柱状图\ncategories = ['A', 'B', 'C', 'D', 'E']\naxes[1, 0].bar(categories, y1, color='skyblue', alpha=0.7, label='系列1')\naxes[1, 0].bar(categories, y2, color='lightcoral', alpha=0.7, label='系列2')\naxes[1, 0].set_title('柱状图')\naxes[1, 0].legend()\n\n# 饼图\nsizes = [30, 25, 20, 15, 10]\nlabels = ['类别A', '类别B', '类别C', '类别D', '类别E']\ncolors = ['gold', 'lightcoral', 'lightskyblue', 'lightgreen', 'plum']\naxes[1, 1].pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\naxes[1, 1].set_title('饼图')\n\n# 调整布局\nplt.tight_layout()\nplt.show()"
        },
        {
          "title": "图表样式自定义",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# 设置中文字体（如果需要）\nplt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签\nplt.rcParams['axes.unicode_minus'] = False    # 用来正常显示负号\n\n# 创建数据\nx = np.linspace(0, 2*np.pi, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# 创建图形\nplt.figure(figsize=(10, 6))\n\n# 绘制多条线\nplt.plot(x, y1, label='sin(x)', color='#FF6B6B', linewidth=2.5, linestyle='-')\nplt.plot(x, y2, label='cos(x)', color='#4ECDC4', linewidth=2.5, linestyle='--')\n\n# 自定义样式\nplt.xlabel('角度 (弧度)', fontsize=12, fontweight='bold')\nplt.ylabel('函数值', fontsize=12, fontweight='bold')\nplt.title('三角函数图像', fontsize=16, fontweight='bold', pad=20)\n\n# 设置坐标轴\nplt.xlim(0, 2*np.pi)\nplt.ylim(-1.2, 1.2)\nplt.xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi], \n           ['0', 'π/2', 'π', '3π/2', '2π'])\n\n# 添加网格和图例\nplt.grid(True, alpha=0.3, linestyle=':', color='gray')\nplt.legend(loc='upper right', frameon=True, shadow=True, fancybox=True)\n\n# 添加注释\nplt.annotate('最大值', xy=(np.pi/2, 1), xytext=(np.pi/2+0.5, 0.8),\n            arrowprops=dict(arrowstyle='->', color='red', lw=2),\n            fontsize=10, color='red')\n\n# 设置背景色\nplt.gca().set_facecolor('#F8F9FA')\n\nplt.tight_layout()\nplt.show()"
        }
      ],
      "keyPoints": [
        "使用plt.figure()创建图形，plt.plot()绘制线图",
        "plt.xlabel()、plt.ylabel()、plt.title()设置标签和标题",
        "plt.legend()添加图例，plt.grid()添加网格",
        "plt.subplot()或plt.subplots()创建子图",
        "plt.savefig()保存图形到文件"
      ]
    },
    "en": {
      "concepts": [
        "Matplotlib is the most popular data visualization library in Python",
        "pyplot module provides MATLAB-like plotting interface",
        "Figure is the plotting window containing one or more Axes (subplots)",
        "Supports various chart types: line plots, scatter plots, bar charts, pie charts, etc.",
        "Can customize chart colors, labels, titles, legends and other styles"
      ],
      "examples": [
        {
          "title": "Basic Line Plot",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# Create figure and axes\nplt.figure(figsize=(8, 6))\nplt.plot(x, y, label='sin(x)', color='blue', linewidth=2)\n\n# Add labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Sine Function Plot')\nplt.legend()\nplt.grid(True, alpha=0.3)\n\n# Show plot\nplt.show()\n\n# Save plot\n# plt.savefig('sin_plot.png', dpi=300, bbox_inches='tight')"
        },
        {
          "title": "Multiple Chart Types",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data\nx = np.array([1, 2, 3, 4, 5])\ny1 = np.array([2, 4, 6, 8, 10])\ny2 = np.array([1, 3, 2, 5, 4])\n\n# Create subplots\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))\n\n# Line plot\naxes[0, 0].plot(x, y1, 'b-o', label='Linear Growth')\naxes[0, 0].plot(x, y2, 'r--s', label='Fluctuation')\naxes[0, 0].set_title('Line Plot')\naxes[0, 0].legend()\naxes[0, 0].grid(True)\n\n# Scatter plot\naxes[0, 1].scatter(x, y1, c='blue', s=100, alpha=0.7, label='Data Points 1')\naxes[0, 1].scatter(x, y2, c='red', s=100, alpha=0.7, label='Data Points 2')\naxes[0, 1].set_title('Scatter Plot')\naxes[0, 1].legend()\n\n# Bar chart\ncategories = ['A', 'B', 'C', 'D', 'E']\naxes[1, 0].bar(categories, y1, color='skyblue', alpha=0.7, label='Series 1')\naxes[1, 0].bar(categories, y2, color='lightcoral', alpha=0.7, label='Series 2')\naxes[1, 0].set_title('Bar Chart')\naxes[1, 0].legend()\n\n# Pie chart\nsizes = [30, 25, 20, 15, 10]\nlabels = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E']\ncolors = ['gold', 'lightcoral', 'lightskyblue', 'lightgreen', 'plum']\naxes[1, 1].pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\naxes[1, 1].set_title('Pie Chart')\n\n# Adjust layout\nplt.tight_layout()\nplt.show()"
        },
        {
          "title": "Chart Style Customization",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 2*np.pi, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Create figure\nplt.figure(figsize=(10, 6))\n\n# Plot multiple lines\nplt.plot(x, y1, label='sin(x)', color='#FF6B6B', linewidth=2.5, linestyle='-')\nplt.plot(x, y2, label='cos(x)', color='#4ECDC4', linewidth=2.5, linestyle='--')\n\n# Customize style\nplt.xlabel('Angle (radians)', fontsize=12, fontweight='bold')\nplt.ylabel('Function Value', fontsize=12, fontweight='bold')\nplt.title('Trigonometric Functions', fontsize=16, fontweight='bold', pad=20)\n\n# Set axes\nplt.xlim(0, 2*np.pi)\nplt.ylim(-1.2, 1.2)\nplt.xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi], \n           ['0', 'π/2', 'π', '3π/2', '2π'])\n\n# Add grid and legend\nplt.grid(True, alpha=0.3, linestyle=':', color='gray')\nplt.legend(loc='upper right', frameon=True, shadow=True, fancybox=True)\n\n# Add annotation\nplt.annotate('Maximum', xy=(np.pi/2, 1), xytext=(np.pi/2+0.5, 0.8),\n            arrowprops=dict(arrowstyle='->', color='red', lw=2),\n            fontsize=10, color='red')\n\n# Set background color\nplt.gca().set_facecolor('#F8F9FA')\n\nplt.tight_layout()\nplt.show()"
        }
      ],
      "keyPoints": [
        "Use plt.figure() to create figures, plt.plot() to draw line plots",
        "plt.xlabel(), plt.ylabel(), plt.title() to set labels and titles",
        "plt.legend() to add legends, plt.grid() to add grids",
        "plt.subplot() or plt.subplots() to create subplots",
        "plt.savefig() to save plots to files"
      ]
    }
  },
  "plot-customization": {
    "zh": {
      "concepts": [
        "高级绘图包括3D图形、热力图、子图布局等复杂可视化",
        "面向对象接口提供更精细的图形控制",
        "可以创建交互式图表和动画效果",
        "支持多种输出格式和分辨率设置",
        "可以与其他可视化库（如Seaborn）结合使用"
      ],
      "examples": [
        {
          "title": "3D图形绘制",
          "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# 创建3D数据\nfig = plt.figure(figsize=(12, 5))\n\n# 3D线图\nax1 = fig.add_subplot(121, projection='3d')\nt = np.linspace(0, 4*np.pi, 100)\nx = np.sin(t)\ny = np.cos(t)\nz = t\nax1.plot(x, y, z, 'b-', linewidth=2)\nax1.set_xlabel('X')\nax1.set_ylabel('Y')\nax1.set_zlabel('Z')\nax1.set_title('3D螺旋线')\n\n# 3D散点图\nax2 = fig.add_subplot(122, projection='3d')\nn = 100\nx = np.random.randn(n)\ny = np.random.randn(n)\nz = np.random.randn(n)\ncolors = np.random.randn(n)\nax2.scatter(x, y, z, c=colors, cmap='viridis', s=50, alpha=0.6)\nax2.set_xlabel('X')\nax2.set_ylabel('Y')\nax2.set_zlabel('Z')\nax2.set_title('3D散点图')\n\nplt.tight_layout()\nplt.show()"
        },
        {
          "title": "热力图和子图布局",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# 创建热力图数据\nnp.random.seed(42)\ndata = np.random.randn(10, 10)\n\n# 创建复杂的子图布局\nfig = plt.figure(figsize=(15, 10))\n\n# 使用GridSpec创建复杂布局\nfrom matplotlib.gridspec import GridSpec\ngs = GridSpec(3, 3, figure=fig)\n\n# 主热力图（占据2x2空间）\nax1 = fig.add_subplot(gs[0:2, 0:2])\nim = ax1.imshow(data, cmap='coolwarm', aspect='auto')\nax1.set_title('热力图', fontsize=14, fontweight='bold')\nplt.colorbar(im, ax=ax1, shrink=0.8)\n\n# 添加数值标注\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        ax1.text(j, i, f'{data[i, j]:.1f}', \n                ha='center', va='center', \n                color='white' if abs(data[i, j]) > 1 else 'black')\n\n# 右侧柱状图\nax2 = fig.add_subplot(gs[0:2, 2])\nrow_means = np.mean(data, axis=1)\nax2.barh(range(len(row_means)), row_means, color='skyblue')\nax2.set_title('行平均值')\nax2.set_ylabel('行索引')\n\n# 底部柱状图\nax3 = fig.add_subplot(gs[2, 0:2])\ncol_means = np.mean(data, axis=0)\nax3.bar(range(len(col_means)), col_means, color='lightcoral')\nax3.set_title('列平均值')\nax3.set_xlabel('列索引')\n\n# 右下角统计信息\nax4 = fig.add_subplot(gs[2, 2])\nax4.axis('off')\nstats_text = f'''统计信息:\n均值: {np.mean(data):.2f}\n标准差: {np.std(data):.2f}\n最大值: {np.max(data):.2f}\n最小值: {np.min(data):.2f}'''\nax4.text(0.1, 0.5, stats_text, transform=ax4.transAxes, \n         fontsize=10, verticalalignment='center',\n         bbox=dict(boxstyle='round', facecolor='lightgray', alpha=0.8))\n\nplt.tight_layout()\nplt.show()"
        },
        {
          "title": "面向对象绘图",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# 使用面向对象接口创建复杂图表\nclass DataVisualizer:\n    def __init__(self, figsize=(12, 8)):\n        self.fig, self.ax = plt.subplots(figsize=figsize)\n        self.setup_style()\n    \n    def setup_style(self):\n        \"\"\"设置图表样式\"\"\"\n        self.ax.set_facecolor('#F8F9FA')\n        self.ax.grid(True, alpha=0.3, linestyle=':')\n        self.ax.spines['top'].set_visible(False)\n        self.ax.spines['right'].set_visible(False)\n    \n    def plot_function(self, x, y, label, color, style='-'):\n        \"\"\"绘制函数\"\"\"\n        self.ax.plot(x, y, label=label, color=color, \n                    linewidth=2.5, linestyle=style)\n    \n    def add_annotations(self, x, y, text, color='red'):\n        \"\"\"添加注释\"\"\"\n        self.ax.annotate(text, xy=(x, y), xytext=(x+0.5, y+0.1),\n                        arrowprops=dict(arrowstyle='->', color=color, lw=1.5),\n                        fontsize=10, color=color, fontweight='bold')\n    \n    def finalize(self, title, xlabel, ylabel):\n        \"\"\"完成图表设置\"\"\"\n        self.ax.set_title(title, fontsize=16, fontweight='bold', pad=20)\n        self.ax.set_xlabel(xlabel, fontsize=12, fontweight='bold')\n        self.ax.set_ylabel(ylabel, fontsize=12, fontweight='bold')\n        self.ax.legend(loc='best', frameon=True, shadow=True, fancybox=True)\n        \n        # 设置坐标轴范围\n        self.ax.set_xlim(0, 2*np.pi)\n        self.ax.set_ylim(-1.5, 1.5)\n        \n        # 设置刻度\n        self.ax.set_xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi])\n        self.ax.set_xticklabels(['0', 'π/2', 'π', '3π/2', '2π'])\n        \n        plt.tight_layout()\n        return self.fig\n\n# 使用自定义类创建图表\nviz = DataVisualizer()\n\n# 创建数据\nx = np.linspace(0, 2*np.pi, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(x + np.pi/4)\n\n# 绘制多个函数\nviz.plot_function(x, y1, 'sin(x)', '#FF6B6B')\nviz.plot_function(x, y2, 'cos(x)', '#4ECDC4', '--')\nviz.plot_function(x, y3, 'sin(x + π/4)', '#45B7D1', '-.')\n\n# 添加注释\nviz.add_annotations(np.pi/2, 1, 'sin最大值')\nviz.add_annotations(0, 1, 'cos最大值')\n\n# 完成图表\nfig = viz.finalize('三角函数比较', '角度 (弧度)', '函数值')\nplt.show()"
        }
      ],
      "keyPoints": [
        "使用Axes3D创建3D图形，支持线图、散点图、曲面图",
        "GridSpec提供灵活的子图布局控制",
        "面向对象接口提供更精细的图形控制",
        "imshow()创建热力图，colorbar()添加颜色条",
        "可以自定义坐标轴、刻度、网格等所有图形元素"
      ]
    },
    "en": {
      "concepts": [
        "Advanced plotting includes 3D graphics, heatmaps, subplot layouts and complex visualizations",
        "Object-oriented interface provides finer control over graphics",
        "Can create interactive charts and animation effects",
        "Supports multiple output formats and resolution settings",
        "Can be combined with other visualization libraries like Seaborn"
      ],
      "examples": [
        {
          "title": "3D Graphics",
          "code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\n# Create 3D data\nfig = plt.figure(figsize=(12, 5))\n\n# 3D line plot\nax1 = fig.add_subplot(121, projection='3d')\nt = np.linspace(0, 4*np.pi, 100)\nx = np.sin(t)\ny = np.cos(t)\nz = t\nax1.plot(x, y, z, 'b-', linewidth=2)\nax1.set_xlabel('X')\nax1.set_ylabel('Y')\nax1.set_zlabel('Z')\nax1.set_title('3D Spiral')\n\n# 3D scatter plot\nax2 = fig.add_subplot(122, projection='3d')\nn = 100\nx = np.random.randn(n)\ny = np.random.randn(n)\nz = np.random.randn(n)\ncolors = np.random.randn(n)\nax2.scatter(x, y, z, c=colors, cmap='viridis', s=50, alpha=0.6)\nax2.set_xlabel('X')\nax2.set_ylabel('Y')\nax2.set_zlabel('Z')\nax2.set_title('3D Scatter Plot')\n\nplt.tight_layout()\nplt.show()"
        },
        {
          "title": "Heatmaps and Subplot Layouts",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create heatmap data\nnp.random.seed(42)\ndata = np.random.randn(10, 10)\n\n# Create complex subplot layout\nfig = plt.figure(figsize=(15, 10))\n\n# Use GridSpec for complex layout\nfrom matplotlib.gridspec import GridSpec\ngs = GridSpec(3, 3, figure=fig)\n\n# Main heatmap (occupies 2x2 space)\nax1 = fig.add_subplot(gs[0:2, 0:2])\nim = ax1.imshow(data, cmap='coolwarm', aspect='auto')\nax1.set_title('Heatmap', fontsize=14, fontweight='bold')\nplt.colorbar(im, ax=ax1, shrink=0.8)\n\n# Add value annotations\nfor i in range(data.shape[0]):\n    for j in range(data.shape[1]):\n        ax1.text(j, i, f'{data[i, j]:.1f}', \n                ha='center', va='center', \n                color='white' if abs(data[i, j]) > 1 else 'black')\n\n# Right side bar chart\nax2 = fig.add_subplot(gs[0:2, 2])\nrow_means = np.mean(data, axis=1)\nax2.barh(range(len(row_means)), row_means, color='skyblue')\nax2.set_title('Row Means')\nax2.set_ylabel('Row Index')\n\n# Bottom bar chart\nax3 = fig.add_subplot(gs[2, 0:2])\ncol_means = np.mean(data, axis=0)\nax3.bar(range(len(col_means)), col_means, color='lightcoral')\nax3.set_title('Column Means')\nax3.set_xlabel('Column Index')\n\n# Bottom right statistics\nax4 = fig.add_subplot(gs[2, 2])\nax4.axis('off')\nstats_text = f'''Statistics:\nMean: {np.mean(data):.2f}\nStd: {np.std(data):.2f}\nMax: {np.max(data):.2f}\nMin: {np.min(data):.2f}'''\nax4.text(0.1, 0.5, stats_text, transform=ax4.transAxes, \n         fontsize=10, verticalalignment='center',\n         bbox=dict(boxstyle='round', facecolor='lightgray', alpha=0.8))\n\nplt.tight_layout()\nplt.show()"
        },
        {
          "title": "Object-Oriented Plotting",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Use object-oriented interface for complex charts\nclass DataVisualizer:\n    def __init__(self, figsize=(12, 8)):\n        self.fig, self.ax = plt.subplots(figsize=figsize)\n        self.setup_style()\n    \n    def setup_style(self):\n        \"\"\"Set chart style\"\"\"\n        self.ax.set_facecolor('#F8F9FA')\n        self.ax.grid(True, alpha=0.3, linestyle=':')\n        self.ax.spines['top'].set_visible(False)\n        self.ax.spines['right'].set_visible(False)\n    \n    def plot_function(self, x, y, label, color, style='-'):\n        \"\"\"Plot function\"\"\"\n        self.ax.plot(x, y, label=label, color=color, \n                    linewidth=2.5, linestyle=style)\n    \n    def add_annotations(self, x, y, text, color='red'):\n        \"\"\"Add annotations\"\"\"\n        self.ax.annotate(text, xy=(x, y), xytext=(x+0.5, y+0.1),\n                        arrowprops=dict(arrowstyle='->', color=color, lw=1.5),\n                        fontsize=10, color=color, fontweight='bold')\n    \n    def finalize(self, title, xlabel, ylabel):\n        \"\"\"Finalize chart settings\"\"\"\n        self.ax.set_title(title, fontsize=16, fontweight='bold', pad=20)\n        self.ax.set_xlabel(xlabel, fontsize=12, fontweight='bold')\n        self.ax.set_ylabel(ylabel, fontsize=12, fontweight='bold')\n        self.ax.legend(loc='best', frameon=True, shadow=True, fancybox=True)\n        \n        # Set axis ranges\n        self.ax.set_xlim(0, 2*np.pi)\n        self.ax.set_ylim(-1.5, 1.5)\n        \n        # Set ticks\n        self.ax.set_xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi])\n        self.ax.set_xticklabels(['0', 'π/2', 'π', '3π/2', '2π'])\n        \n        plt.tight_layout()\n        return self.fig\n\n# Use custom class to create charts\nviz = DataVisualizer()\n\n# Create data\nx = np.linspace(0, 2*np.pi, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(x + np.pi/4)\n\n# Plot multiple functions\nviz.plot_function(x, y1, 'sin(x)', '#FF6B6B')\nviz.plot_function(x, y2, 'cos(x)', '#4ECDC4', '--')\nviz.plot_function(x, y3, 'sin(x + π/4)', '#45B7D1', '-.')\n\n# Add annotations\nviz.add_annotations(np.pi/2, 1, 'sin max')\nviz.add_annotations(0, 1, 'cos max')\n\n# Finalize chart\nfig = viz.finalize('Trigonometric Functions Comparison', 'Angle (radians)', 'Function Value')\nplt.show()"
        }
      ],
      "keyPoints": [
        "Use Axes3D to create 3D graphics, supports line plots, scatter plots, surface plots",
        "GridSpec provides flexible subplot layout control",
        "Object-oriented interface provides finer control over graphics",
        "imshow() creates heatmaps, colorbar() adds color bars",
        "Can customize all graphic elements including axes, ticks, grids"
      ]
    }
  },
  "subplots-multiple-plots": {
    "zh": {
      "concepts": [
        "子图(subplot)允许在同一个图形中创建多个图表",
        "subplot()函数可以创建网格布局的子图",
        "subplots()函数返回图形对象和坐标轴数组",
        "GridSpec提供更灵活的子图布局控制",
        "可以创建复杂的多图表布局用于数据比较"
      ],
      "examples": [
        {
          "title": "基础子图创建",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# 创建数据\nx = np.linspace(0, 2*np.pi, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(x + np.pi/4)\ny4 = np.cos(x + np.pi/4)\n\n# 方法1: 使用subplot()\nplt.figure(figsize=(12, 8))\n\nplt.subplot(2, 2, 1)  # 2行2列，第1个位置\nplt.plot(x, y1, 'b-', linewidth=2)\nplt.title('sin(x)')\nplt.grid(True, alpha=0.3)\n\nplt.subplot(2, 2, 2)  # 2行2列，第2个位置\nplt.plot(x, y2, 'r-', linewidth=2)\nplt.title('cos(x)')\nplt.grid(True, alpha=0.3)\n\nplt.subplot(2, 2, 3)  # 2行2列，第3个位置\nplt.plot(x, y3, 'g-', linewidth=2)\nplt.title('sin(x + π/4)')\nplt.grid(True, alpha=0.3)\n\nplt.subplot(2, 2, 4)  # 2行2列，第4个位置\nplt.plot(x, y4, 'm-', linewidth=2)\nplt.title('cos(x + π/4)')\nplt.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()"
        },
        {
          "title": "使用subplots()创建子图",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# 创建数据\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.exp(-x/5)\ny4 = np.log(x + 1)\n\n# 使用subplots()创建2x2子图\nfig, axes = plt.subplots(2, 2, figsize=(12, 8))\n\n# 绘制第一个子图\naxes[0, 0].plot(x, y1, 'b-', linewidth=2, label='sin(x)')\naxes[0, 0].set_title('正弦函数')\naxes[0, 0].set_xlabel('x')\naxes[0, 0].set_ylabel('y')\naxes[0, 0].grid(True, alpha=0.3)\naxes[0, 0].legend()\n\n# 绘制第二个子图\naxes[0, 1].plot(x, y2, 'r-', linewidth=2, label='cos(x)')\naxes[0, 1].set_title('余弦函数')\naxes[0, 1].set_xlabel('x')\naxes[0, 1].set_ylabel('y')\naxes[0, 1].grid(True, alpha=0.3)\naxes[0, 1].legend()\n\n# 绘制第三个子图\naxes[1, 0].plot(x, y3, 'g-', linewidth=2, label='exp(-x/5)')\naxes[1, 0].set_title('指数衰减函数')\naxes[1, 0].set_xlabel('x')\naxes[1, 0].set_ylabel('y')\naxes[1, 0].grid(True, alpha=0.3)\naxes[1, 0].legend()\n\n# 绘制第四个子图\naxes[1, 1].plot(x, y4, 'm-', linewidth=2, label='log(x+1)')\naxes[1, 1].set_title('对数函数')\naxes[1, 1].set_xlabel('x')\naxes[1, 1].set_ylabel('y')\naxes[1, 1].grid(True, alpha=0.3)\naxes[1, 1].legend()\n\n# 添加总标题\nfig.suptitle('多个函数图像', fontsize=16, fontweight='bold')\n\nplt.tight_layout()\nplt.show()"
        },
        {
          "title": "复杂子图布局",
          "code": "import matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nimport numpy as np\n\n# 创建数据\nx = np.linspace(0, 2*np.pi, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(2*x)\n\n# 使用GridSpec创建复杂布局\nfig = plt.figure(figsize=(15, 10))\ngs = GridSpec(3, 3, figure=fig)\n\n# 主图占据2x2空间\nax_main = fig.add_subplot(gs[0:2, 0:2])\nax_main.plot(x, y1, 'b-', linewidth=3, label='sin(x)')\nax_main.plot(x, y2, 'r-', linewidth=3, label='cos(x)')\nax_main.set_title('主要函数图像', fontsize=14, fontweight='bold')\nax_main.set_xlabel('x (弧度)')\nax_main.set_ylabel('函数值')\nax_main.grid(True, alpha=0.3)\nax_main.legend()\n\n# 右侧小图\nax_right = fig.add_subplot(gs[0:2, 2])\nax_right.plot(x, y3, 'g-', linewidth=2)\nax_right.set_title('sin(2x)')\nax_right.grid(True, alpha=0.3)\n\n# 底部统计图\nax_bottom = fig.add_subplot(gs[2, 0:2])\n# 创建柱状图显示函数值范围\nranges = [np.max(y1) - np.min(y1), np.max(y2) - np.min(y2), np.max(y3) - np.min(y3)]\nlabels = ['sin(x)', 'cos(x)', 'sin(2x)']\ncolors = ['blue', 'red', 'green']\nax_bottom.bar(labels, ranges, color=colors, alpha=0.7)\nax_bottom.set_title('函数值范围')\nax_bottom.set_ylabel('范围')\n\n# 右下角信息\nax_info = fig.add_subplot(gs[2, 2])\nax_info.axis('off')\ninfo_text = f'''函数信息:\nsin(x): 周期=2π\ncos(x): 周期=2π\nsin(2x): 周期=π\n\n数据点数: {len(x)}'''\nax_info.text(0.1, 0.5, info_text, transform=ax_info.transAxes,\n             fontsize=10, verticalalignment='center',\n             bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))\n\nplt.tight_layout()\nplt.show()"
        }
      ],
      "keyPoints": [
        "subplot(rows, cols, index)创建网格布局的子图",
        "subplots()返回图形对象和坐标轴数组，便于批量操作",
        "GridSpec提供更灵活的子图布局控制",
        "tight_layout()自动调整子图间距",
        "suptitle()为整个图形添加总标题"
      ]
    },
    "en": {
      "concepts": [
        "Subplots allow creating multiple charts in the same figure",
        "subplot() function can create grid-layout subplots",
        "subplots() function returns figure object and axes array",
        "GridSpec provides more flexible subplot layout control",
        "Can create complex multi-chart layouts for data comparison"
      ],
      "examples": [
        {
          "title": "Basic Subplot Creation",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 2*np.pi, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(x + np.pi/4)\ny4 = np.cos(x + np.pi/4)\n\n# Method 1: Using subplot()\nplt.figure(figsize=(12, 8))\n\nplt.subplot(2, 2, 1)  # 2 rows, 2 cols, position 1\nplt.plot(x, y1, 'b-', linewidth=2)\nplt.title('sin(x)')\nplt.grid(True, alpha=0.3)\n\nplt.subplot(2, 2, 2)  # 2 rows, 2 cols, position 2\nplt.plot(x, y2, 'r-', linewidth=2)\nplt.title('cos(x)')\nplt.grid(True, alpha=0.3)\n\nplt.subplot(2, 2, 3)  # 2 rows, 2 cols, position 3\nplt.plot(x, y3, 'g-', linewidth=2)\nplt.title('sin(x + π/4)')\nplt.grid(True, alpha=0.3)\n\nplt.subplot(2, 2, 4)  # 2 rows, 2 cols, position 4\nplt.plot(x, y4, 'm-', linewidth=2)\nplt.title('cos(x + π/4)')\nplt.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()"
        },
        {
          "title": "Creating Subplots with subplots()",
          "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.exp(-x/5)\ny4 = np.log(x + 1)\n\n# Create 2x2 subplots using subplots()\nfig, axes = plt.subplots(2, 2, figsize=(12, 8))\n\n# Plot first subplot\naxes[0, 0].plot(x, y1, 'b-', linewidth=2, label='sin(x)')\naxes[0, 0].set_title('Sine Function')\naxes[0, 0].set_xlabel('x')\naxes[0, 0].set_ylabel('y')\naxes[0, 0].grid(True, alpha=0.3)\naxes[0, 0].legend()\n\n# Plot second subplot\naxes[0, 1].plot(x, y2, 'r-', linewidth=2, label='cos(x)')\naxes[0, 1].set_title('Cosine Function')\naxes[0, 1].set_xlabel('x')\naxes[0, 1].set_ylabel('y')\naxes[0, 1].grid(True, alpha=0.3)\naxes[0, 1].legend()\n\n# Plot third subplot\naxes[1, 0].plot(x, y3, 'g-', linewidth=2, label='exp(-x/5)')\naxes[1, 0].set_title('Exponential Decay')\naxes[1, 0].set_xlabel('x')\naxes[1, 0].set_ylabel('y')\naxes[1, 0].grid(True, alpha=0.3)\naxes[1, 0].legend()\n\n# Plot fourth subplot\naxes[1, 1].plot(x, y4, 'm-', linewidth=2, label='log(x+1)')\naxes[1, 1].set_title('Logarithmic Function')\naxes[1, 1].set_xlabel('x')\naxes[1, 1].set_ylabel('y')\naxes[1, 1].grid(True, alpha=0.3)\naxes[1, 1].legend()\n\n# Add overall title\nfig.suptitle('Multiple Function Plots', fontsize=16, fontweight='bold')\n\nplt.tight_layout()\nplt.show()"
        },
        {
          "title": "Complex Subplot Layout",
          "code": "import matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nimport numpy as np\n\n# Create data\nx = np.linspace(0, 2*np.pi, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.sin(2*x)\n\n# Use GridSpec for complex layout\nfig = plt.figure(figsize=(15, 10))\ngs = GridSpec(3, 3, figure=fig)\n\n# Main plot occupies 2x2 space\nax_main = fig.add_subplot(gs[0:2, 0:2])\nax_main.plot(x, y1, 'b-', linewidth=3, label='sin(x)')\nax_main.plot(x, y2, 'r-', linewidth=3, label='cos(x)')\nax_main.set_title('Main Function Plots', fontsize=14, fontweight='bold')\nax_main.set_xlabel('x (radians)')\nax_main.set_ylabel('Function Value')\nax_main.grid(True, alpha=0.3)\nax_main.legend()\n\n# Right side small plot\nax_right = fig.add_subplot(gs[0:2, 2])\nax_right.plot(x, y3, 'g-', linewidth=2)\nax_right.set_title('sin(2x)')\nax_right.grid(True, alpha=0.3)\n\n# Bottom statistics plot\nax_bottom = fig.add_subplot(gs[2, 0:2])\n# Create bar chart showing function value ranges\nranges = [np.max(y1) - np.min(y1), np.max(y2) - np.min(y2), np.max(y3) - np.min(y3)]\nlabels = ['sin(x)', 'cos(x)', 'sin(2x)']\ncolors = ['blue', 'red', 'green']\nax_bottom.bar(labels, ranges, color=colors, alpha=0.7)\nax_bottom.set_title('Function Value Ranges')\nax_bottom.set_ylabel('Range')\n\n# Bottom right info\nax_info = fig.add_subplot(gs[2, 2])\nax_info.axis('off')\ninfo_text = f'''Function Info:\nsin(x): Period=2π\ncos(x): Period=2π\nsin(2x): Period=π\n\nData Points: {len(x)}'''\nax_info.text(0.1, 0.5, info_text, transform=ax_info.transAxes,\n             fontsize=10, verticalalignment='center',\n             bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))\n\nplt.tight_layout()\nplt.show()"
        }
      ],
      "keyPoints": [
        "subplot(rows, cols, index) creates grid-layout subplots",
        "subplots() returns figure object and axes array for batch operations",
        "GridSpec provides more flexible subplot layout control",
        "tight_layout() automatically adjusts subplot spacing",
        "suptitle() adds overall title to the entire figure"
      ]
    }
  }
}
