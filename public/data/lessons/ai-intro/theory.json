{
  "ai-concepts": {
    "zh": {
      "concepts": [
        "人工智能（AI）是让机器模拟人类智能行为的技术",
        "机器学习是AI的一个子领域，通过数据训练模型",
        "深度学习使用神经网络进行复杂模式识别",
        "监督学习使用标记数据训练模型",
        "无监督学习从无标记数据中发现模式",
        "强化学习通过奖励机制学习最优行为"
      ],
      "examples": [
        {
          "title": "机器学习基本流程",
          "code": "# 机器学习基本流程示例\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# 1. 准备数据\nX = np.array([[1], [2], [3], [4], [5]])\ny = np.array([2, 4, 6, 8, 10])\n\n# 2. 分割训练和测试数据\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# 3. 创建和训练模型\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# 4. 预测\npredictions = model.predict(X_test)\nprint(f\"预测结果: {predictions}\")"
        },
        {
          "title": "AI应用领域示例",
          "code": "# AI在不同领域的应用\n\n# 计算机视觉\n# 图像分类、目标检测、人脸识别\n\n# 自然语言处理\n# 文本分析、机器翻译、聊天机器人\n\n# 推荐系统\n# 电商推荐、音乐推荐、新闻推荐\n\n# 自动驾驶\n# 路径规划、障碍物检测、决策控制\n\nprint(\"AI技术正在改变我们的生活方式\")"
        }
      ],
      "keyPoints": [
        "AI不是魔法，而是基于数学和统计学的技术",
        "数据质量对AI模型性能至关重要",
        "AI模型需要大量计算资源和训练时间",
        "AI应用需要考虑伦理和隐私问题",
        "AI是工具，需要人类监督和指导"
      ]
    },
    "en": {
      "concepts": [
        "Artificial Intelligence (AI) is technology that enables machines to simulate human intelligence",
        "Machine Learning is a subset of AI that trains models using data",
        "Deep Learning uses neural networks for complex pattern recognition",
        "Supervised Learning uses labeled data to train models",
        "Unsupervised Learning discovers patterns from unlabeled data",
        "Reinforcement Learning learns optimal behavior through reward mechanisms"
      ],
      "examples": [
        {
          "title": "Basic Machine Learning Workflow",
          "code": "# Basic Machine Learning Workflow Example\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# 1. Prepare data\nX = np.array([[1], [2], [3], [4], [5]])\ny = np.array([2, 4, 6, 8, 10])\n\n# 2. Split training and testing data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# 3. Create and train model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# 4. Make predictions\npredictions = model.predict(X_test)\nprint(f\"Predictions: {predictions}\")"
        },
        {
          "title": "AI Application Areas",
          "code": "# AI Applications in Different Fields\n\n# Computer Vision\n# Image classification, object detection, face recognition\n\n# Natural Language Processing\n# Text analysis, machine translation, chatbots\n\n# Recommendation Systems\n# E-commerce recommendations, music recommendations, news recommendations\n\n# Autonomous Driving\n# Path planning, obstacle detection, decision control\n\nprint(\"AI technology is changing our way of life\")"
        }
      ],
      "keyPoints": [
        "AI is not magic, but technology based on mathematics and statistics",
        "Data quality is crucial for AI model performance",
        "AI models require significant computational resources and training time",
        "AI applications must consider ethical and privacy issues",
        "AI is a tool that requires human supervision and guidance"
      ]
    }
  },
  "python-ai-libraries": {
    "zh": {
      "concepts": [
        "scikit-learn是Python最流行的机器学习库",
        "TensorFlow是Google开发的深度学习框架",
        "PyTorch是Facebook开发的动态深度学习框架",
        "NumPy和Pandas是数据预处理的基础库",
        "Matplotlib和Seaborn用于数据可视化",
        "Jupyter Notebook是AI开发的常用环境"
      ],
      "examples": [
        {
          "title": "scikit-learn基础使用",
          "code": "# scikit-learn基础示例\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# 加载数据集\niris = load_iris()\nX, y = iris.data, iris.target\n\n# 分割数据\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# 创建随机森林分类器\nclf = RandomForestClassifier(n_estimators=100)\n\n# 训练模型\nclf.fit(X_train, y_train)\n\n# 预测和评估\npredictions = clf.predict(X_test)\naccuracy = accuracy_score(y_test, predictions)\nprint(f\"准确率: {accuracy:.2f}\")"
        },
        {
          "title": "TensorFlow简单神经网络",
          "code": "# TensorFlow简单神经网络示例\nimport tensorflow as tf\nimport numpy as np\n\n# 创建简单的神经网络\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(128, activation='relu', input_shape=(784,)),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# 编译模型\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# 生成示例数据\nx_train = np.random.random((1000, 784))\ny_train = np.random.randint(0, 10, (1000,))\n\n# 训练模型\nmodel.fit(x_train, y_train, epochs=5, batch_size=32)\n\nprint(\"模型训练完成\")"
        },
        {
          "title": "数据预处理和可视化",
          "code": "# 数据预处理和可视化示例\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 创建示例数据\nnp.random.seed(42)\ndata = {\n    'feature1': np.random.normal(0, 1, 100),\n    'feature2': np.random.normal(0, 1, 100),\n    'target': np.random.randint(0, 2, 100)\n}\ndf = pd.DataFrame(data)\n\n# 数据预处理\nprint(\"数据形状:\", df.shape)\nprint(\"缺失值:\", df.isnull().sum())\n\n# 数据可视化\nplt.figure(figsize=(10, 6))\nplt.subplot(1, 2, 1)\nplt.scatter(df['feature1'], df['feature2'], c=df['target'])\nplt.title('特征分布')\n\nplt.subplot(1, 2, 2)\nplt.hist(df['feature1'], bins=20, alpha=0.7)\nplt.title('特征1分布')\n\nplt.tight_layout()\nplt.show()"
        }
      ],
      "keyPoints": [
        "选择合适的库取决于具体任务和项目需求",
        "scikit-learn适合传统机器学习任务",
        "TensorFlow和PyTorch适合深度学习项目",
        "数据预处理是AI项目成功的关键步骤",
        "可视化有助于理解数据和模型性能",
        "Jupyter Notebook提供交互式开发环境"
      ]
    },
    "en": {
      "concepts": [
        "scikit-learn is Python's most popular machine learning library",
        "TensorFlow is a deep learning framework developed by Google",
        "PyTorch is a dynamic deep learning framework developed by Facebook",
        "NumPy and Pandas are fundamental libraries for data preprocessing",
        "Matplotlib and Seaborn are used for data visualization",
        "Jupyter Notebook is a common environment for AI development"
      ],
      "examples": [
        {
          "title": "Basic scikit-learn Usage",
          "code": "# Basic scikit-learn Example\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load dataset\niris = load_iris()\nX, y = iris.data, iris.target\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# Create Random Forest classifier\nclf = RandomForestClassifier(n_estimators=100)\n\n# Train model\nclf.fit(X_train, y_train)\n\n# Predict and evaluate\npredictions = clf.predict(X_test)\naccuracy = accuracy_score(y_test, predictions)\nprint(f\"Accuracy: {accuracy:.2f}\")"
        },
        {
          "title": "Simple TensorFlow Neural Network",
          "code": "# Simple TensorFlow Neural Network Example\nimport tensorflow as tf\nimport numpy as np\n\n# Create simple neural network\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(128, activation='relu', input_shape=(784,)),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Generate sample data\nx_train = np.random.random((1000, 784))\ny_train = np.random.randint(0, 10, (1000,))\n\n# Train model\nmodel.fit(x_train, y_train, epochs=5, batch_size=32)\n\nprint(\"Model training completed\")"
        },
        {
          "title": "Data Preprocessing and Visualization",
          "code": "# Data Preprocessing and Visualization Example\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create sample data\nnp.random.seed(42)\ndata = {\n    'feature1': np.random.normal(0, 1, 100),\n    'feature2': np.random.normal(0, 1, 100),\n    'target': np.random.randint(0, 2, 100)\n}\ndf = pd.DataFrame(data)\n\n# Data preprocessing\nprint(\"Data shape:\", df.shape)\nprint(\"Missing values:\", df.isnull().sum())\n\n# Data visualization\nplt.figure(figsize=(10, 6))\nplt.subplot(1, 2, 1)\nplt.scatter(df['feature1'], df['feature2'], c=df['target'])\nplt.title('Feature Distribution')\n\nplt.subplot(1, 2, 2)\nplt.hist(df['feature1'], bins=20, alpha=0.7)\nplt.title('Feature1 Distribution')\n\nplt.tight_layout()\nplt.show()"
        }
      ],
      "keyPoints": [
        "Choose appropriate libraries based on specific tasks and project requirements",
        "scikit-learn is suitable for traditional machine learning tasks",
        "TensorFlow and PyTorch are suitable for deep learning projects",
        "Data preprocessing is a key step for successful AI projects",
        "Visualization helps understand data and model performance",
        "Jupyter Notebook provides an interactive development environment"
      ]
    }
  }
}
