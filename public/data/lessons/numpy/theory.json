{
  "numpy-basics": {
    "zh": {
      "concepts": [
        "NumPy是Python中用于科学计算的基础库，提供高性能的多维数组对象",
        "ndarray是NumPy的核心数据结构，比Python原生列表更高效",
        "NumPy数组是同质性的，所有元素必须是相同的数据类型",
        "NumPy提供了丰富的数学函数和线性代数运算",
        "NumPy数组支持向量化操作，避免显式循环"
      ],
      "examples": [
        {
          "title": "创建NumPy数组",
          "code": "import numpy as np\n\n# 从列表创建数组\narr1 = np.array([1, 2, 3, 4, 5])\nprint(arr1)  # [1 2 3 4 5]\nprint(type(arr1))  # <class 'numpy.ndarray'>\n\n# 创建多维数组\narr2 = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr2)\nprint(f\"形状: {arr2.shape}\")  # (2, 3)\nprint(f\"维度: {arr2.ndim}\")   # 2\n\n# 创建特殊数组\nzeros = np.zeros((3, 4))  # 零数组\nones = np.ones((2, 3))    # 一数组\nidentity = np.eye(3)      # 单位矩阵\nprint(zeros)\nprint(ones)\nprint(identity)"
        },
        {
          "title": "数组索引和切片",
          "code": "import numpy as np\n\n# 一维数组索引\narr = np.array([10, 20, 30, 40, 50])\nprint(arr[0])    # 10\nprint(arr[-1])   # 50\nprint(arr[1:4])  # [20 30 40]\n\n# 二维数组索引\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(matrix[0, 1])      # 2\nprint(matrix[1, :])      # [4 5 6] - 第二行\nprint(matrix[:, 2])      # [3 6 9] - 第三列\nprint(matrix[0:2, 1:3])  # [[2 3] [5 6]] - 子矩阵\n\n# 布尔索引\narr = np.array([1, 2, 3, 4, 5, 6])\nmask = arr > 3\nprint(mask)        # [False False False  True  True  True]\nprint(arr[mask])   # [4 5 6]"
        },
        {
          "title": "数组运算",
          "code": "import numpy as np\n\n# 基本运算\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([5, 6, 7, 8])\n\nprint(arr1 + arr2)  # [ 6  8 10 12]\nprint(arr1 - arr2)  # [-4 -4 -4 -4]\nprint(arr1 * arr2)  # [ 5 12 21 32]\nprint(arr1 / arr2)  # [0.2 0.33333333 0.42857143 0.5]\n\n# 标量运算\nprint(arr1 * 2)     # [2 4 6 8]\nprint(arr1 ** 2)    # [ 1  4  9 16]\n\n# 数学函数\narr = np.array([1, 4, 9, 16, 25])\nprint(np.sqrt(arr))    # [1. 2. 3. 4. 5.]\nprint(np.sin(arr))     # 正弦值\nprint(np.log(arr))     # 自然对数\n\n# 统计函数\nprint(np.sum(arr))     # 55\nprint(np.mean(arr))    # 11.0\nprint(np.max(arr))     # 25\nprint(np.min(arr))     # 1"
        }
      ],
      "keyPoints": [
        "NumPy数组比Python列表更节省内存，计算速度更快",
        "使用np.array()创建数组，np.zeros()、np.ones()创建特殊数组",
        "数组索引从0开始，支持负数索引和切片操作",
        "NumPy支持广播机制，不同形状的数组可以进行运算",
        "使用np.random模块生成随机数组"
      ]
    },
    "en": {
      "concepts": [
        "NumPy is the fundamental library for scientific computing in Python, providing high-performance multidimensional array objects",
        "ndarray is NumPy's core data structure, more efficient than Python native lists",
        "NumPy arrays are homogeneous, all elements must be of the same data type",
        "NumPy provides rich mathematical functions and linear algebra operations",
        "NumPy arrays support vectorized operations, avoiding explicit loops"
      ],
      "examples": [
        {
          "title": "Creating NumPy Arrays",
          "code": "import numpy as np\n\n# Create array from list\narr1 = np.array([1, 2, 3, 4, 5])\nprint(arr1)  # [1 2 3 4 5]\nprint(type(arr1))  # <class 'numpy.ndarray'>\n\n# Create multidimensional array\narr2 = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr2)\nprint(f\"Shape: {arr2.shape}\")  # (2, 3)\nprint(f\"Dimensions: {arr2.ndim}\")   # 2\n\n# Create special arrays\nzeros = np.zeros((3, 4))  # zero array\nones = np.ones((2, 3))    # ones array\nidentity = np.eye(3)      # identity matrix\nprint(zeros)\nprint(ones)\nprint(identity)"
        },
        {
          "title": "Array Indexing and Slicing",
          "code": "import numpy as np\n\n# 1D array indexing\narr = np.array([10, 20, 30, 40, 50])\nprint(arr[0])    # 10\nprint(arr[-1])   # 50\nprint(arr[1:4])  # [20 30 40]\n\n# 2D array indexing\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(matrix[0, 1])      # 2\nprint(matrix[1, :])      # [4 5 6] - second row\nprint(matrix[:, 2])      # [3 6 9] - third column\nprint(matrix[0:2, 1:3])  # [[2 3] [5 6]] - submatrix\n\n# Boolean indexing\narr = np.array([1, 2, 3, 4, 5, 6])\nmask = arr > 3\nprint(mask)        # [False False False  True  True  True]\nprint(arr[mask])   # [4 5 6]"
        },
        {
          "title": "Array Operations",
          "code": "import numpy as np\n\n# Basic operations\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([5, 6, 7, 8])\n\nprint(arr1 + arr2)  # [ 6  8 10 12]\nprint(arr1 - arr2)  # [-4 -4 -4 -4]\nprint(arr1 * arr2)  # [ 5 12 21 32]\nprint(arr1 / arr2)  # [0.2 0.33333333 0.42857143 0.5]\n\n# Scalar operations\nprint(arr1 * 2)     # [2 4 6 8]\nprint(arr1 ** 2)    # [ 1  4  9 16]\n\n# Mathematical functions\narr = np.array([1, 4, 9, 16, 25])\nprint(np.sqrt(arr))    # [1. 2. 3. 4. 5.]\nprint(np.sin(arr))     # sine values\nprint(np.log(arr))     # natural logarithm\n\n# Statistical functions\nprint(np.sum(arr))     # 55\nprint(np.mean(arr))    # 11.0\nprint(np.max(arr))     # 25\nprint(np.min(arr))     # 1"
        }
      ],
      "keyPoints": [
        "NumPy arrays are more memory efficient and faster than Python lists",
        "Use np.array() to create arrays, np.zeros(), np.ones() for special arrays",
        "Array indexing starts from 0, supports negative indexing and slicing",
        "NumPy supports broadcasting for operations between arrays of different shapes",
        "Use np.random module to generate random arrays"
      ]
    }
  },
  "array-operations": {
    "zh": {
      "concepts": [
        "NumPy数组支持元素级运算，对每个元素执行相同操作",
        "广播机制允许不同形状的数组进行运算",
        "数组形状可以通过reshape()方法改变",
        "数组可以沿不同轴进行聚合操作（求和、求平均等）",
        "NumPy提供了丰富的线性代数运算函数",
        "数组切片、重塑、转置是期中考试重点内容"
      ],
      "examples": [
        {
          "title": "数组形状操作",
          "code": "import numpy as np\n\n# 创建数组\narr = np.array([1, 2, 3, 4, 5, 6])\nprint(f\"原始形状: {arr.shape}\")  # (6,)\n\n# 改变形状\nreshaped = arr.reshape(2, 3)\nprint(f\"重塑后: {reshaped.shape}\")  # (2, 3)\nprint(reshaped)\n# [[1 2 3]\n#  [4 5 6]]\n\n# 展平数组\nflattened = reshaped.flatten()\nprint(flattened)  # [1 2 3 4 5 6]\n\n# 转置\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\nprint(matrix.T)  # 转置\n# [[1 4]\n#  [2 5]\n#  [3 6]]"
        },
        {
          "title": "聚合操作",
          "code": "import numpy as np\n\n# 创建2D数组\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(arr)\n\n# 全局聚合\nprint(f\"总和: {np.sum(arr)}\")      # 45\nprint(f\"平均值: {np.mean(arr)}\")    # 5.0\nprint(f\"最大值: {np.max(arr)}\")     # 9\nprint(f\"最小值: {np.min(arr)}\")     # 1\n\n# 沿轴聚合\nprint(f\"每行求和: {np.sum(arr, axis=1)}\")  # [ 6 15 24]\nprint(f\"每列求和: {np.sum(arr, axis=0)}\")  # [12 15 18]\nprint(f\"每行平均值: {np.mean(arr, axis=1)}\")  # [2. 5. 8.]\nprint(f\"每列最大值: {np.max(arr, axis=0)}\")  # [7 8 9]"
        },
        {
          "title": "线性代数运算",
          "code": "import numpy as np\n\n# 矩阵乘法\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\n\n# 元素级乘法\nelement_wise = A * B\nprint(\"元素级乘法:\")\nprint(element_wise)\n# [[ 5 12]\n#  [21 32]]\n\n# 矩阵乘法\nmatrix_mult = np.dot(A, B)\nprint(\"矩阵乘法:\")\nprint(matrix_mult)\n# [[19 22]\n#  [43 50]]\n\n# 使用@操作符（Python 3.5+）\nmatrix_mult2 = A @ B\nprint(\"使用@操作符:\")\nprint(matrix_mult2)\n\n# 其他线性代数运算\nprint(f\"矩阵A的行列式: {np.linalg.det(A)}\")  # -2.0\nprint(f\"矩阵A的逆矩阵:\")\nprint(np.linalg.inv(A))\n# [[-2.   1. ]\n#  [ 1.5 -0.5]]"
        },
        {
          "title": "期中考试样题：NumPy数组操作",
          "code": "# 期中考试样题：给定二维NumPy数组myArray\nimport numpy as np\n\n# 创建示例数组\nmyArray = np.array([\n    [1, 2, 3, 4, 5, 6, 7, 8],\n    [9, 10, 11, 12, 13, 14, 15, 16],\n    [17, 18, 19, 20, 21, 22, 23, 24],\n    [25, 26, 27, 28, 29, 30, 31, 32]\n])\nprint(\"原始数组:\")\nprint(myArray)\nprint(f\"形状: {myArray.shape}\")\n\n# 1. 前3行前3列\nfirst_three_rows_cols = myArray[:3, :3]\nprint(\"\\n前3行前3列:\")\nprint(first_three_rows_cols)\n\n# 2. 前3列\nfirst_three_cols = myArray[:, :3]\nprint(\"\\n前3列:\")\nprint(first_three_cols)\n\n# 3. 第3列和第7列（索引2和6）\ncol_3_and_7 = myArray[:, [2, 6]]  # 选择第3列和第7列\nprint(\"\\n第3列和第7列:\")\nprint(col_3_and_7)\n\n# 其他有用的数组操作\nprint(\"\\n数组转置:\")\nprint(myArray.T)\n\nprint(\"\\n数组重塑为8x4:\")\nreshaped = myArray.reshape(8, 4)\nprint(reshaped)\n\nprint(\"\\n数组切片：每行取前4个元素:\")\nsliced = myArray[:, :4]\nprint(sliced)"
        }
      ],
      "keyPoints": [
        "reshape()方法改变数组形状，但不改变数据",
        "axis=0表示沿行操作，axis=1表示沿列操作",
        "使用np.dot()或@操作符进行矩阵乘法",
        "np.linalg模块提供线性代数函数",
        "聚合函数可以指定axis参数控制聚合方向",
        "数组切片语法：array[行切片, 列切片]",
        "使用[:, [2, 6]]选择特定列"
      ]
    },
    "en": {
      "concepts": [
        "NumPy arrays support element-wise operations, applying the same operation to each element",
        "Broadcasting allows operations between arrays of different shapes",
        "Array shape can be changed using reshape() method",
        "Arrays can be aggregated along different axes (sum, mean, etc.)",
        "NumPy provides rich linear algebra operation functions"
      ],
      "examples": [
        {
          "title": "Array Shape Operations",
          "code": "import numpy as np\n\n# Create array\narr = np.array([1, 2, 3, 4, 5, 6])\nprint(f\"Original shape: {arr.shape}\")  # (6,)\n\n# Reshape array\nreshaped = arr.reshape(2, 3)\nprint(f\"Reshaped: {reshaped.shape}\")  # (2, 3)\nprint(reshaped)\n# [[1 2 3]\n#  [4 5 6]]\n\n# Flatten array\nflattened = reshaped.flatten()\nprint(flattened)  # [1 2 3 4 5 6]\n\n# Transpose\nmatrix = np.array([[1, 2, 3], [4, 5, 6]])\nprint(matrix.T)  # transpose\n# [[1 4]\n#  [2 5]\n#  [3 6]]"
        },
        {
          "title": "Aggregation Operations",
          "code": "import numpy as np\n\n# Create 2D array\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(arr)\n\n# Global aggregation\nprint(f\"Sum: {np.sum(arr)}\")      # 45\nprint(f\"Mean: {np.mean(arr)}\")    # 5.0\nprint(f\"Max: {np.max(arr)}\")     # 9\nprint(f\"Min: {np.min(arr)}\")     # 1\n\n# Aggregation along axes\nprint(f\"Sum by row: {np.sum(arr, axis=1)}\")  # [ 6 15 24]\nprint(f\"Sum by column: {np.sum(arr, axis=0)}\")  # [12 15 18]\nprint(f\"Mean by row: {np.mean(arr, axis=1)}\")  # [2. 5. 8.]\nprint(f\"Max by column: {np.max(arr, axis=0)}\")  # [7 8 9]"
        },
        {
          "title": "Linear Algebra Operations",
          "code": "import numpy as np\n\n# Matrix multiplication\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\n\n# Element-wise multiplication\nelement_wise = A * B\nprint(\"Element-wise multiplication:\")\nprint(element_wise)\n# [[ 5 12]\n#  [21 32]]\n\n# Matrix multiplication\nmatrix_mult = np.dot(A, B)\nprint(\"Matrix multiplication:\")\nprint(matrix_mult)\n# [[19 22]\n#  [43 50]]\n\n# Using @ operator (Python 3.5+)\nmatrix_mult2 = A @ B\nprint(\"Using @ operator:\")\nprint(matrix_mult2)\n\n# Other linear algebra operations\nprint(f\"Determinant of A: {np.linalg.det(A)}\")  # -2.0\nprint(f\"Inverse of A:\")\nprint(np.linalg.inv(A))\n# [[-2.   1. ]\n#  [ 1.5 -0.5]]"
        }
      ],
      "keyPoints": [
        "reshape() method changes array shape without changing data",
        "axis=0 means operations along rows, axis=1 means along columns",
        "Use np.dot() or @ operator for matrix multiplication",
        "np.linalg module provides linear algebra functions",
        "Aggregation functions can specify axis parameter to control direction"
      ]
    }
  }
}
